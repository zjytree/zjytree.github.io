<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MapReduce 介绍</title>
    <link href="/2021/11/13/MapReduce/"/>
    <url>/2021/11/13/MapReduce/</url>
    
    <content type="html"><![CDATA[<h2 id="在文章中插入指定大小的图片。"><a href="#在文章中插入指定大小的图片。" class="headerlink" title="在文章中插入指定大小的图片。"></a>在文章中插入指定大小的图片。</h2><img class="[class names] D:\MyBlog\ysblog\source\jpgs\MR1.png [width] [height] &quot;title text&quot; &quot;alt text&quot;"><h2 id="MapReduce原语"><a href="#MapReduce原语" class="headerlink" title="MapReduce原语"></a>MapReduce原语</h2><p>1.Hadoop MapReduce框架可以让你在集群中可靠的、容错的、并行、处理TB级别的数据<br>2.’相同’key的键值对为一组调用一次reduce方法，方法内迭代这一组数据并计算<br>3.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/12/hello-world/"/>
    <url>/2021/11/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 指令2</title>
    <link href="/2021/11/12/Linux%E6%8C%87%E4%BB%A42/"/>
    <url>/2021/11/12/Linux%E6%8C%87%E4%BB%A42/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux指令"><a href="#Linux指令" class="headerlink" title="Linux指令"></a>Linux指令</h1><ol><li><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3></li><li><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3></li><li><h3 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h3><ol><li>```shell<br>wc sort.txt<br>wc -l sort.txt<br>wc -w sort.txt<br>cat sort.txt | wc -l<br>ps aux | grep sshd | wc -l<br>wc -c sort.txt<br>wc -m sort.txt<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><span class="hljs-number">4.</span> ### sed<br><br>   <span class="hljs-number">1.</span> ```shell<br>      #追加第一行下面，源文件没有修改，通过-i修改源文件<br>      sed <span class="hljs-string">&quot;1a\hello world&quot;</span> sed.txt<br>      sed -i <span class="hljs-string">&quot;1a\hello world&quot;</span> sed.txt<br>      #dG删除光标以下的数据<br>      #删除第二行数据<br>      sed -i <span class="hljs-string">&quot;2d&quot;</span> sed.txt<br>      sed -i <span class="hljs-string">&quot;d&quot;</span> sed.txt<br>      #复制带有数字的数据,并只显示带有数字的数据<br>      sed -i -n <span class="hljs-string">&quot;/[0-9]/p&quot;</span> sed.txt<br>      #替换s,忽略大小写i<br>      sed -i <span class="hljs-string">&quot;s/vim/Vi/i&quot;</span> sed.txt<br>      sed <span class="hljs-string">&quot;s/[0-6]/5/&quot;</span> inittab<br>      #将“id:<span class="hljs-number">3</span>:initdefault:”里面的数据替换成<span class="hljs-number">5</span><br>      sed -i <span class="hljs-string">&quot;s/\(id:\)[0-6]\(:initdefault:\)/\15\2/&quot;</span> inittab<br>      sed -i -r <span class="hljs-string">&quot;s/(id:)[0-6](:initdefault:)/\15\2/&quot;</span> inittab<br>      #将/etc/profile文件里有PATH的哪一行写<span class="hljs-string">&#x27;w&#x27;</span>到path.log里面<br>      sed -n <span class="hljs-string">&quot;/PATH/w path.log&quot;</span> /etc/profile<br>      <br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><ol><li><p>```<br>awk:</p><ul><li>   awk是一个强大的文本分析工具</li><li>   相对于grep查找，sed编辑，awk在对数据分析并生成报告时更为强大</li><li>   awk把文件逐行读入，以空格和制表符作为默认分隔符将每行切片，切开的部分再进行各种分析处理。</li></ul><p>awk -F ‘{pattern + action}’ {filenames}</p><ul><li>   支持自定义分隔符</li><li>   支持正则表达式匹配</li><li>   支持自定义变量，数组  a[1]  a[tom]  map(key)</li><li>   支持内置变量<br>    ARGC               命令行参数个数<br>    ARGV               命令行参数排列<br>    ENVIRON            支持队列中系统环境变量的使用<br>    FILENAME           awk浏览的文件名<br>    FNR                浏览文件的记录数<br>    FS                 设置输入域分隔符，等价于命令行 -F选项<br>    NF                 浏览记录的域的个数<br>    NR                 已读的记录数<br>    OFS                输出域分隔符<br>    ORS                输出记录分隔符<br>    RS                 控制记录分隔符</li><li>   支持函数</li><li>   print、split、substr、sub、gsub</li><li>   支持流程控制语句，类C语言</li><li>   if、while、do/while、for、break、continue</li></ul><p>数组更像map</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><br>2. ```<span class="hljs-keyword">shell</span><br>   awk -F <span class="hljs-string">&quot;:&quot;</span> &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1&#125;</span>&#x27; passwd<br>   awk -F &#x27;:&#x27; &#x27;&#123;pringt <span class="hljs-variable">$1</span> <span class="hljs-string">&quot;,&quot;</span> <span class="hljs-variable">$7&#125;</span>&#x27; passwd<br>   awk -F &#x27;:&#x27; &#x27;BEGIN&#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;name,shell&quot;</span>&#125; &#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span><span class="hljs-string">&quot;,&quot;</span> <span class="hljs-variable">$7&#125;</span> END&#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;shell end&quot;</span>&#125;&#x27; passwd<br>   #显示所有数据,列出行和列<br>   awk -F &#x27;:&#x27; &#x27;&#123;<span class="hljs-keyword">print</span> NR<span class="hljs-string">&quot;-&quot;</span>NF<span class="hljs-string">&quot;-&quot;</span><span class="hljs-variable">$0&#125;</span>&#x27; passwd<br></code></pre></td></tr></table></figure></li><li><p>```powershell<br>•统计报表：合计每人1月总消费，0：manager，1：worker<br>Tom          0   2012-12-11      car     3000<br>John     1   2013-01-13      bike    1000<br>vivi     1   2013-01-18      car     2800<br>Tom          0   2013-01-20      car     2500<br>John     1   2013-01-28      bike    3500</p><p>#解答<br>awk ‘{<br>  split($3,data_date,”-“)<br>  if(data_date[2] == “01”){</p><pre><code>role_money[$1] += $5role_goods[$1] = $4if($2 == &quot;0&quot;)&#123;  role_position[$1] = &quot;manager&quot;&#125;else&#123;role_position[$1] = &quot;worker&quot;&#125;</code></pre><p>  }<br>  }<br>  END{for(name in role_money){print name”\t”role_position[name]”\t”role_goods[name]”\t”role_money[name]}}’ awk.txt</p><p>结果：<br>vivi    worker    car    2800<br>Tom        manager    car    2500<br>John    worker    bike 4500</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><br>4. ```shell<br>   样例<br>   cp `<span class="hljs-keyword">ls</span> aaa*<span class="hljs-string">.zip</span> bbb*<span class="hljs-string">.zip</span> ccc*<span class="hljs-string">.zip</span> abc20190823*<span class="hljs-string">.zip</span> GDXX-20190822*<span class="hljs-string">.zip</span>` <span class="hljs-string">/root/zipfile/</span><br>   <span class="hljs-keyword">cd</span> zipfile<br>   unzip &#x27;*<span class="hljs-string">.zip</span>&#x27;<br>   file *<span class="hljs-string">.csv</span> | cut -d <span class="hljs-string">&quot; &quot;</span> -f 1,2 &gt; a.txt<br></code></pre></td></tr></table></figure></li></ol></li><li><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">定义函数<br>myshellname () &#123;<br>   command1<br>command2<br>   command3<br>   ……<br>&#125;<br>调用：<br>myshellname<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">总结：<br>bash是一个程序，shell是一个bash进程<br>bash是一个解释器，启动器<br>解释执行用户的输入指令，可以通过shell启动其他的进程<br><br>将要执行的命令放到一个文件中，<br>在文件的开头：<br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#!/usr/bin/python</span><br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">程序自身都有I/O<br>0：标准输入<br>1：标准输出<br>2：错误输出<br>ls / /hello 1&gt; log.out<br>ls / /hello 1&gt; log.out 2&gt; log.err<br>输出重定向： 重定向从左到右绑定<br>ls  /  /hello   2&gt;&amp;1  1&gt; mylog.log<br>从左向右绑定，错误输出绑定到标准输出，此时标准输出是输出到控制台，然后才是标准输出重定向到文件。两个重定向的绑定没有关系。<br><span class="hljs-meta">#</span><span class="bash">注意&amp;1符号的替换，直接将输出绑定到资源，而不是绑定到文件描述符</span><br>ls  /  /hello   1&gt; mylog1.log  2&gt;&amp;1<br>先让标准输出重定向到文件，然后将错误输出绑定到标准输出，也就是左边绑定的文件。<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@node0 sh]# fa()&#123;<br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">local</span> a=100</span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$a</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> &#125;</span><br>[root@node0 sh]# fa<br>100<br>[root@node0 sh]# fb()&#123;<br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$3</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;10&#125;</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> &#125;</span><br>[root@node0 sh]# fb 1 2 3 4 5 6 7 8 9 10 11<br>1<br>3<br>10<br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;10&#125;</span>除了个位，十位或百位等需要加个括号不然会出错</span><br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p><strong>猜数字游戏</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>result=38<br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;input a number [1,100]:&quot;</span> num<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$num</span> -gt <span class="hljs-variable">$result</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;猜大了！&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$num</span> -eq <span class="hljs-variable">$result</span> ];<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;恭喜你，猜对了！&quot;</span><br>        <span class="hljs-built_in">break</span><br><span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;猜小了！&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 指令</title>
    <link href="/2021/11/11/Linux%E6%8C%87%E4%BB%A4/"/>
    <url>/2021/11/11/Linux%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>本章节主要介绍一些Linux常用指令的用法，在分享给大家的同时，也能巩固一下自己对Linux指令的复习</p><h2 id="简单的shell命令"><a href="#简单的shell命令" class="headerlink" title="简单的shell命令"></a>简单的shell命令</h2><h3 id="命令提示符解释"><a href="#命令提示符解释" class="headerlink" title="命令提示符解释"></a>命令提示符解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment">#         #/root</span><br>[jinxf@localhost ~]$        <span class="hljs-comment">#/home/jinxf</span><br></code></pre></td></tr></table></figure><p>用户名@主机名  当前目录   #系统权限   $普通权限</p><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>命令  选项  参数 (三者之间要有空格，区分大小写)<br>command  [-options]  [args]<br>[args]:参数（多个参数之间用空格分隔）<br>案例演示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># ls -a</span><br>.   a    anaconda-ks.cfg  .bash_logout   .bashrc  install.log         .tcshrc   x<br>..  abc  .bash_history    .bash_profile  .cshrc   install.log.syslog  .viminfo  xyz<br>[root@node1 ~]<span class="hljs-comment"># ls -a -l</span><br>total 72<br>dr-xr-x---.  6 root root 4096 Nov 27 12:37 .<br>dr-xr-xr-x. 22 root root 4096 Nov 27 09:22 ..<br>drwxr-xr-x   3 root root 4096 Nov 27 10:17 a<br>drwxr-xr-x   8 root root 4096 Nov 27 10:53 abc<br>-rw-------.  1 root root  900 Nov 27 03:47 anaconda-ks.cfg<br>-rw-------.  1 root root  828 Nov 27 09:48 .bash_history<br>-rw-r--r--.  1 root root   18 May 20  2009 .bash_logout<br>-rw-r--r--.  1 root root  176 May 20  2009 .bash_profile<br></code></pre></td></tr></table></figure><h3 id="获取命令帮助"><a href="#获取命令帮助" class="headerlink" title="获取命令帮助"></a>获取命令帮助</h3><p>1、使用help查看内建命令的帮助(enable查看内建命令)<br>2、info 命令<br>3、命令  –help<br>4、#man  命令<br>5、查手册<br>6、搜索引擎 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># ls --help</span><br>[root@node1 ~]<span class="hljs-comment"># info ls</span><br>[root@node1 ~]<span class="hljs-comment"># man ls</span><br></code></pre></td></tr></table></figure><p>help只能查看内建命令，可以通过<code>enable</code>查看有哪些内建命令</p><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>当前虚拟机中不能直接使用man，默认是没有安装的，不识别man命令,使用下面命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install man man-pages -y<br></code></pre></td></tr></table></figure><p>q命令退出查看<br>看到的全是英文，是不是很酸爽，慢慢多看看就好了。如果你英语烂到完全看不懂，那我再教你一招，汉化man提示信息。<br>要想汉化man提示信息，系统中需要安装man-pages-zh-CN软件包。默认情况下，系统自带的yum源不包含man-pages-zh-CN,使用下面命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum  install  man-pages-zh-CN  -y<br></code></pre></td></tr></table></figure><p>安装之后需要配置系统语言环境，在/etc/sysconfig/i18n下面修改为中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># echo $LANG</span><br>en_US.UTF-8<br>[root@node1 ~]<span class="hljs-comment"># vim /etc/sysconfig/i18n</span><br><br><span class="hljs-comment">#LANG=&quot;en_US.UTF-8&quot;</span><br>LANG=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span><br>SYSFONT=<span class="hljs-string">&quot;latarcyrheb-sun16&quot;</span><br></code></pre></td></tr></table></figure><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>echo  -n表示不要另起新行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># echo &quot;hello world&quot;</span><br>hello world<br>[root@node1 ~]<span class="hljs-comment"># echo -n &quot;hello world&quot;</span><br>hello world[root@node1 ~]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>type打印一个字符串的类型，可能的值为：别名，内置命令，函数，关键字，可执行文件或者什么都不输出（不是前面的类型）。<br>查看cd命令和yum的类型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># type cd</span><br><span class="hljs-built_in">cd</span> is a shell <span class="hljs-built_in">builtin</span><br>[root@node1 ~]<span class="hljs-comment"># type yum</span><br>yum is /usr/bin/yum<br></code></pre></td></tr></table></figure><p>可以看到cd为内置命令，而yum是外部命令</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>file命令用于查看各个文件的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># file /usr/bin/yum</span><br>/usr/bin/yum: a /usr/bin/python script text executable<br>[root@node1 ~]<span class="hljs-comment"># file install.log</span><br>install.log: ASCII text<br>[root@node1 ~]<span class="hljs-comment"># file start_hdfs_ha.sh</span><br>start_hdfs_ha.sh: Bourne-Again shell script text executable<br></code></pre></td></tr></table></figure><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># ls</span><br>[root@node1 ~]<span class="hljs-comment"># ls -l</span><br>[root@node1 ~]<span class="hljs-comment"># ls -a</span><br>[root@node1 ~]<span class="hljs-comment"># ll -h</span><br></code></pre></td></tr></table></figure><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>打印当前工作目录路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># pwd</span><br>/root<br></code></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>可以通过命令查看系统内进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看磁盘使用情况</span><br>[root@node1 ~]<span class="hljs-comment"># ps -ef</span><br>UID         PID   PPID  C STIME TTY          TIME CMD<br>root          1      0  0 Oct30 ?        00:00:00 /sbin/init<br>root          2      0  0 Oct30 ?        00:00:00 [kthreadd]<br>root          3      2  0 Oct30 ?        00:00:00 [migration/0]<br>...<br></code></pre></td></tr></table></figure><p>进程查看命令<br>    ps(process status) :将某个时间点的程序运作情况截取下来<br>    选项和参数<br>    a :和输入终端（terminal） 关联的所有 process，通常与x一起使用，列出完整信息。<br>    x :后台进程，通常与 a 这个参数一起使用,可列出较完整信息<br>    u :有效使用者 (effective user) 相关的 process<br>    ps aux 观察系统所有的程序数据 （常用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># ps aux</span><br>USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root          1  0.0  0.1  19232  1492 ?        Ss   Oct30   0:00 /sbin/init<br>root          2  0.0  0.0      0     0 ?        S    Oct30   0:00 [kthreadd]<br>root          3  0.0  0.0      0     0 ?        S    Oct30   0:00 [migration/0]<br>...<br></code></pre></td></tr></table></figure><p>•以下为各选项的含义<br>    USER:该 process 属于那个使用者<br>    PID :该 process 的程序标识符。<br>    %CPU:该 process 使用掉的 CPU 资源百分比;<br>    %MEM:该 process 所占用的物理内存百分比;<br>    VSZ :该 process 使用掉的虚拟内存量 (Kbytes)<br>    RSS :该 process 占用的物理的内存量 (Kbytes)<br>    TTY :该 process 是在那个终端机上面运作,若与终端机无关则显示 ?, 另外, tty1-tty6 是本机上面的登入者程序,若为 pts/0 等等的,则表示为由网络连接进主机的程序。<br>    STAT:该进程目前的状态,状态显示与ps -l 的 S 旗标相同 (R/S/D/T/Z)<br>    START:该 process 被触发启动的时间;<br>    TIME :该 process 实际使用 CPU 运作的时间。<br>    COMMAND:该程序的实际命令为何? </p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>用于创建目录，可以使用-p创建多层目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># mkdir a</span><br>[root@node1 ~]<span class="hljs-comment"># mkdir a/b/c</span><br>mkdir: 无法创建目录<span class="hljs-string">&quot;a/b/c&quot;</span>: 没有那个文件或目录<br>[root@node1 ~]<span class="hljs-comment"># mkdir -p a/b/c</span><br></code></pre></td></tr></table></figure><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>rm用于删除文件,添加-f选项可以不用确认强制删除<br>如果删除目录的话，需要添加-r参数表示迭代删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># mkdir -p a/b/c</span><br>[root@node1 ~]<span class="hljs-comment"># rm -rf a</span><br></code></pre></td></tr></table></figure><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>文件拷贝<br>cp  文件   目标目录<br>可以同时拷贝多个文件，文件名之间用空格隔开</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># cp stop_hdfs_ha.sh a/b/c</span><br>[root@node1 ~]<span class="hljs-comment"># cd a/b/c</span><br>[root@node1 c]<span class="hljs-comment"># ll</span><br>总用量 4<br>-rwxr-xr-x 1 root root 324 10月 31 02:29 stop_hdfs_ha.sh<br></code></pre></td></tr></table></figure><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>mv用于移动或重命名文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 c]<span class="hljs-comment"># mv stop_hdfs_ha.sh ABC.sh   #重命名为ABC.sh </span><br>[root@node1 c]<span class="hljs-comment"># mv ABC.sh  ../#移动文件到上一级目录下</span><br></code></pre></td></tr></table></figure><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><p>用于创建硬链接或软链接<br>可以使用ll -i选项让ll打印文件的inode信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@node1 c]<span class="hljs-comment"># cp /etc/profile ./</span><br>[root@node1 c]<span class="hljs-comment"># ln profile  ln1    #创建硬链接</span><br>[root@node1 c]<span class="hljs-comment"># ln -s profile ln2  #创建软链接：让ln2指向profile, 给profile创建软连接，相当于windows中的快捷方式</span><br>[root@node1 c]<span class="hljs-comment"># ll -i</span><br>总用量 8<br>784365 -rw-r--r-- 2 root root 2041 10月 31 02:33 ln1<br>784366 lrwxrwxrwx 1 root root    7 10月 31 02:34 ln2 -&gt; profile<br>784365 -rw-r--r-- 2 root root 2041 10月 31 02:33 profile<br></code></pre></td></tr></table></figure><p>如果两个文件inode一样，表示两个文件（ln1和profile）实际上是同一个文件，硬连接。如果inode不一样，但是有ln2-&gt;profile，表示ln2是profile的软链接。<br>注意：<br>    ln1、ln2都不能提前创建，或是已经存在的文件，否则报错。<br>    软连接删除不会删除源文件<br>    硬链接删除后如果源文件没有硬链接，则文件被删除<br>如何在不使用mv的情况下移动文件？可以操作硬连接</p><h2 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h2><h2 id="系统操作命令"><a href="#系统操作命令" class="headerlink" title="系统操作命令"></a>系统操作命令</h2><h2 id="文本操作命令"><a href="#文本操作命令" class="headerlink" title="文本操作命令"></a>文本操作命令</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
